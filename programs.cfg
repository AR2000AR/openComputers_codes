{
  ["bank_api"] = {
    files = {
      [":master/bank_api/lib/"] = "/lib",
      [":master/bank_api/man/"] = "/man",
      ["?master/bank_api/etc/bank/api/api.conf"] = "//etc/bank/api/"
    },
    dependencies = {
      ["osinetwork"] = "/",
    },
    name = "Bank API",
    description = "API used to send request to the bank server",
    authors = "AR2000AR",
    note = "You will need to set the server address",
    repo = "tree/master/bank_api",
    version = "1.1.0"
  },
  ["libcb"] = {
    files = {
      [":master/libCB/lib/"] = "/lib",
      [":master/libCB/man/"] = "/man"
    },
    name = "libCB",
    description = "library used to read and write CB",
    authors = "AR2000AR",
    note = "CB are unmanaged floppies",
    repo = "tree/master/libCB",
    version = "2.0.0"
  },
  ["bank_dev_tools"] = {
    files = {
      [":master/bank_dev_tools/bin/"] = "/bin"
    },
    name = "bank_dev_tools",
    description = "collection of tools used to help in the bank software development",
    authors = "AR2000AR",
    note = "DEV ONLY",
    repo = "tree/master/bank_dev_tools",
    version = "1.0.0"
  },
  ["bank_server"] = {
    files = {
      [":master/bank_server/rc.d/"] = "//etc/rc.d",
      [":master/bank_server/bin/"] = "/bin"
    },
    dependencies = {
      ["libcb"] = "/",
      ["osinetwork"] = "/",
    },
    name = "Bank server",
    description = "The bank server service",
    authors = "AR2000AR",
    note = "enable it with the rc command",
    repo = "tree/master/bank_server",
    version = "1.1.0"
  },
  ["libgui"] = {
    files = {
      [":master/libGUI/lib/"] = "/lib",
      [":master/libGUI/bin/"] = "/bin"
    },
    dependencies = {
      ["libclass"] = "/"
    },
    name = "libGUI",
    description = "library used to create gui \n The library can load \"pam\" images",
    authors = "AR2000AR",
    note = "transparency in pam image isn't fully supported. Only fully transparent pixel are recognized as such",
    repo = "tree/master/libGUI",
    version = "1.0.0"
  },
  ["libgui_extra"] = {
    files = {
      [":master/libGUI-extra/lib/"] = "/lib"
    },
    dependencies = {
      ["libgui"] = "/"
    },
    name = "libGUI-extra",
    description = "more widgets for the libGUI",
    authors = "AR2000AR, thofi",
    repo = "tree/master/libGUI-extra",
    version = "1.0.0"
  },
  ["bank_client"] = {
    files = {
      [":master/bank_client/share/"] = "/share",
      [":master/bank_client/bin/"] = "/bin"
    },
    dependencies = {
      ["libgui"] = "/",
      ["libgui_extra"] = "/",
      ["bank_api"] = "/",
      ["libcb"] = "/"
    },
    name = "bank client app",
    description = "The client app for the banker",
    authors = "AR2000AR, thofi",
    note = "WIP",
    repo = "tree/master/bank_client",
    version = "1.2.0"
  },
  ["item_id_catcher"] = {
    files = {
      [":master/itemIdCatcher/bin/"] = "/bin",
      [":master/itemIdCatcher/man/"] = "/man"
    },
    name = "itemIdCatcher",
    description = "Write id of item in the chest on the top to a file",
    authors = "AR2000AR",
    note = "item are moved to a other chest",
    repo = "tree/master/itemIdCatcher",
    version = "1.0.0"
  },
  ["libclass"] = {
    files = {
      [":master/libClass/lib/"] = "/lib"
    },
    name = "libClass",
    description = "Class library for lua",
    authors = "AR2000AR",
    repo = "tree/master/libClass",
    version = "1.0.0"
  },
  ["libcoin"] = {
    files = {
      [":master/libCoin/lib/"] = "/lib"
    },
    name = "libCoin",
    description = "small library used to moved coins from ordinarycoins from one chest to a other",
    authors = "AR2000AR",
    repo = "tree/master/libCoin",
    version = "1.0.0"
  },
  ["bank_atm"] = {
    files = {
      [":master/bank_atm/bin/"] = "/bin",
      [":master/bank_atm/share/"] = "/share"
    },
    name = "bank atm",
    description = "atm that work with my bank server",
    authors = "AR200AR",
    repo = "tree/master/bank_atm",
    dependencies = {
      ["libgui"] = "/",
      ["bank_api"] = "/",
      ["libcb"] = "/",
      ["libcoin"] = "/",
      ["libgui_extra"] = "/"
    },
    version = "1.1.0"
  },
  ["door_ctrl"] = {
    files = {
      [":master/doorCtrl/bin/"] = "/bin",
      ["?master/doorCtrl/etc/doorCtrl.conf"] = "//etc"
    },
    name = "Door controller",
    description = "Controll your doors with multiple redstone io block",
    authors = "AR2000AR",
    repo = "tree/master/doorCtrl",
    dependencies = {
      ["libgui"] = "/",
      ["libclass"] = "/"
    },
    version = "1.0.0"
  },
  ["autocrafter"] = {
    files = {
      [":master/autocrafter/bin/"] = "/bin",
      [":master/autocrafter/misc/"] = "/misc"
    },
    name = "AutoCrafter",
    description = "User a robot linked via a linked card to craft item from a inventory",
    authors = "AR200AR",
    repo = "tree/master/autocrafter",
    version = "1.0.0"
  },
  ["stargate"] = {
    files = {
      [":master/stargate_ctl/bin/"] = "/bin",
      [":master/stargate_ctl/share/"] = "/share"
    },
    name = "Stargate Ctl",
    description = "GUI to controll stargates from SGCraft",
    authors = "AR2000AR",
    repo = "tree/master/stargate_crl",
    version = "1.0.0",
    dependencies = {
      ["libgui"] = "/"
    }
  },
  ["vending"] = {
    files = {
      [":master/vending/bin/"] = "/bin",
      [":master/vending/etc/vending/"] = "//etc/vending"
    },
    dependencies = {
      ["libCoin"] = "/",
      ["bank_api"] = "/"
    },
    name = "Vending",
    description = "Vending machine program compatible with libCoin and bank_api",
    authors = "AR2000AR",
    repo = "tree/master/vending",
    version = "1.0.0"
  },
  ["bank_account_maker"] = {
    files = {
      [":master/account_maker/bin/"] = "/bin"
    },
    dependencies = {
      ["bank_api"] = "/"
    },
    name = "Account maker",
    description = "Machine to create one account per player and dispense a credit card",
    authors = "AR2000AR",
    repo = "tree/master/account_maker",
    version = "1.0.0"
  },
  ["lnfsc"] = {
    files = {
      [":master/lnfs/lnfsc/lib/"] = "/lib",
      [":master/lnfs/lnfsc/bin/"] = "/bin"
    },
    name = "Lua Network File System Client",
    description = "Let you mount a files ystem hosted by a other computer using lnfss and use it as if it was a local file system",
    authors = "AR2000AR",
    repo = "tree/master/lnfs",
    version = "1.0.0"
  },
  ["lnfss"] = {
    files = {
      [":master/lnfs/lnfss/rc.d/"] = "//etc/rc.d",
      [":master/lnfs/lnfss/man/"] = "/man"
    },
    name = "Lua Network File System Server",
    description = "Share your local file system with other computers. Root folder is configurable in rc.cfg",
    authors = "AR2000AR",
    repo = "tree/master/lnfs",
    version = "1.0.0"
  },
  ["instgen"] = {
    files = {
      [":master/repo-installer/bin/"] = "/bin",
      [":master/repo-installer/misc/"] = "/misc"
    },
    name = "Repo installer",
    description = "A set of tools for making installable floppies for OpenComputers from OPPM repositories.",
    authors = "Izaya, AR2000AR",
    repo = "tree/master/repo-installer",
    version = "1.0.0"
  },
  ["crypttool"] = {
    files = {
      [":master/crypttool/bin/"] = "/bin",
      [":master/crypttool/lib/"] = "/lib"
    },
    name = "CryptTool",
    description = "Remount a filesystem and store everything as encrypted data. Use managed (default) floppy or HDD",
    authors = "AR2000AR",
    repo = "tree/master/crypttol",
    version = "1.0.0"
  },
  ["osinetwork"] = {
    files = {
      [":master/network/lib/"] = "/lib",
      [":master/network/bin/"] = "/bin",
      ["master/network/boot/30_network.lua"] = "//boot/",
      ["?master/network/etc/network/interfaces"] ="//etc/network/"
    },
    dependencies = {
      ["libclass2"] = "/"
    },
    name = "OSI Network stack",
    description = "A close to official rfc emulation of the OSI layers for OpenOS. Include Ethernet, ARP, ICMP, UDP. Also provide a luasocket libe librairy",
    note = "Are provided : ping, ifup, ifdown, arp, nc, netstat. Any one of theses tools may be moved to a separate package at any time",
    authors = "AR2000AR",
    repo = "tree/master/network",
    version = "2.4.1"
  },
  ["dns_common"] = {
    files = {
      [":master/dns_common/lib/"] = "/lib",
      ["?master/dns_common/etc/resolv.conf"] = "//etc"
    },
    dependencies = {
      ["osinetwork"] = "/"
    },
    name = "DNS common files",
    description = "basic files used by the dns server as well as the resolver library",
    authors = "AR2000AR",
    repo = "tree/master/dns_common",
    hidden = true,
    version = "1.0.1"
  },
  ["dns_server"] = {
    files = {
      ["master/dns_server/etc/rc.d/dnsd.lua"] = "//etc/rc.d"
    },
    dependencies = {
      ["dns_common"] = "/",
    },
    name = "DNS server daemon",
    description = "this package provide the dns server",
    authors = "AR2000AR",
    repo = "tree/master/dns_server",
    version = "1.1.0"
  },
  ["nslookup"] = {
    files = {
      ["master/nslookup/bin/nslookup.lua"] = "/bin"
    },
    dependencies = {
      ["dns_common"] = "/"
    },
    name = "nslookup",
    description = "cmd line tool to querry a name server",
    authors = "AR2000AR",
    repo = "tree/master/nslookup",
    version = "1.0.0"
  },
  ["libtar"] = {
    files = {
      ["master/tar/lib/tar.lua"] = "/lib"
    },
    version = "1.1.0",
    name = "libtar",
    description = "Librairy to extract and list the content of tar archive",
    authors = "AR2000AR, luarock",
    repo = "tree/master/tar",
  },
  ["pm"] = {
    files = {
      ["master/pm/bin/pm.lua"] = "/bin",
      ["master/pm/lib/pm.lua"] = "/lib"
    },
    dependencies = {
      ["libtar"] = "/"
    },
    version = "1.2.3",
    name = "pm Package Manager",
    description = "Package manager for OpenOS",
    authors = "AR2000AR",
    repo = "tree/master/pm"
  },
  ["pm_get"] = {
    files = {
      ["master/pm_get/bin/pm-get.lua"] = "/bin",
      ["?master/pm_get/etc/pm/sources.list"] = "//etc/pm/"
    },
    dependencies = {
      ["pm"] = "/"
    },
    version = "1.3.4",
    name = "pm get",
    description = "Download and install package for pm",
    authors = "AR2000AR",
    repo = "tree/master/pm"
  },
  ["libclass2"] = {
    files = {
      [":master/libClass2/lib/"] = "/lib"
    },
    version = "1.0.0",
    name = "libClass2",
    description = "A new and improved version of libclass, with cleaner syntax for cleaner code",
    authors = "AR2000AR",
    repo = "tree/master/libclass"
  },
  ["yawl"] = {
    files = {
      [":master/yawl/lib"] = "/lib"
    },
    dependencies = {
      ["libclass2"] = "/"
    },
    version = "1.6.1",
    name = "Yet Another Widget Library",
    description = "New version of libgui, but using libclass2 and cleaner code and interface.";
    authors = "AR2000AR,Renno231",
    repo = "tree/master/yawl"
  },
  ["yawl_example"] = {
    files = {
      [":master/yawl/bin"] = "/bin"
    },
    dependencies = {
      ["yawl"] = "/"
    },
    version = "1.7.0",
    name = "Yet Another Widget Library Example file",
    description = "New version of libgui, but using libclass2 and cleaner code and interface.";
    note = "This is only a example file",
    authors = "AR2000AR",
    repo = "tree/master/yawl"
  },
  ["stargate2"] = {
    files = {
      [":master/stargate_ctl2/bin/"] = "/bin",
      [":master/stargate_ctl2/share/"] = "/share"
    },
    name = "Stargate Ctl",
    description = "GUI to controll stargates from SGCraft",
    authors = "AR2000AR",
    repo = "tree/master/stargate_crl2",
    version = "1.2.0",
    dependencies = {
      ["yawl"] = "/"
    }
  },
  ["stargate2_bios"] = {
    files = {
      [":master/stargate_ctl2_bios/share/"] = "/share"
    },
    name = "Stargate Ctl BIOS",
    description = "A small BIOS compatible program to make a gate smart",
    note = "/usr/share/stargate/stargate.bios",
    authors = "AR2000AR",
    repo = "tree/master/stargate_crl2_bios",
    version = "1.1.0",
  },
  ["icable"] = {
    files = {
      [":master/icable/lib/"] = "/lib",
      [":master/icable/bin/"] = "/bin"
    },
    dependencies = {
      ["osinetwork"] = "/",
      ["datahashlib"] = "/"
    },
    name = "icable",
    description = "Use the internet card instead of the network card with osinetwork",
    authors = "AR2000AR",
    repo = "tree/master/icable",
    version = "0.1.0"
  },
  ["datahashlib"] = {
    files = {
      [":master/datahashlib/lib/"] = "/lib",
    },
    name="data hash library",
    description="provide the sha256 algo.",
    authors = "AR2000AR, Roberto Ierusalimschy",
    repo = "tree/master/datahashlib",
    version = "1.2.0"
  }
}
